//! src/state/hand_data.rs
//!
//! @description
//! This module defines the `HandData` account, which stores all the confidential,
//! encrypted information for a single hand of poker. This account is created
//! at the start of a hand and closed after the hand is resolved to reclaim rent.
//!
//! Key features:
//! - Stores the encrypted deck and player hands, ensuring no party can see hidden cards.
//! - Holds a cryptographic commitment to the shuffle for later verification.
//! - Uses fixed-size arrays for predictable on-chain sizing.

use anchor_lang::prelude::*;
use crate::state::constants::MAX_PLAYERS;

/// An account to store the encrypted data for a single hand of poker.
/// This data is generated by Arcium and used as input for subsequent Arcium computations.
#[account]
#[derive(InitSpace)]
pub struct HandData {
    /// The public key of the `Table` account this hand belongs to.
    pub table_pubkey: Pubkey,

    /// A unique identifier for this hand, incremented at the table level.
    pub hand_id: u64,

    /// A cryptographic commitment (hash) of the initial shuffled deck state.
    /// This is used by the Hand History Verifier to prove the shuffle was not tampered with.
    pub shuffle_commitment: [u8; 32],

    /// The encrypted representation of the remaining deck of cards.
    /// Stored as 3 ciphertexts, following the packed `Deck` struct from Arcis.
    pub encrypted_deck_ciphertexts: [[u8; 32]; 3],

    /// The nonce used for encrypting and decrypting the deck.
    pub encrypted_deck_nonce: u128,

    /// An array storing the encrypted hole cards for each player in the hand.
    /// The `Option` allows for empty seats. The `EncryptedHandInfo` contains
    /// all necessary data for a player to decrypt their own hand.
    pub encrypted_hands: [Option<EncryptedHandInfo>; MAX_PLAYERS],
}

/// A struct to hold the encrypted information for a single player's hand.
#[derive(InitSpace, AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
pub struct EncryptedHandInfo {
    /// The player's public key.
    pub player: Pubkey,
    /// The encrypted hole cards (packed into a single ciphertext).
    pub ciphertext: [u8; 32],
    /// The nonce used for this specific encryption.
    pub nonce: u128,
    /// The player's x25519 public key used for the key exchange.
    pub encryption_key: [u8; 32],
}